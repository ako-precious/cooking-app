$_SERVER["REMOTE_ADDR"]  check for how you will use it in the future
  
  
  
  
  
  
  
  
  
  
  
  
  Type of cuisine:

Italian
French
Mexican
Thai
Indian
Mediterranean
Japanese
Vegetarian
Vegan
Dietary preference:

Low-carb
Gluten-free
Dairy-free
Spicy
Light
Hearty
General terms:

Surprise me! (Shows trust in the chef's expertise)
Seasonal (Focuses on using fresh, in-season ingredients)
Chef's choice (Similar to "surprise me!")
Recommendation (Asks for the chef's suggestion based on your preferences)
Signature dish (Requests the chef's most well-known creation)

<!-- Saving for later -->
<!-- "Indulge your taste buds and unlock a world of culinary delights with our platform, where passionate home chefs transform ordinary ingredients into extraordinary experiences. From tantalizing dishes to mouthwatering desserts, our community of food artisans invites you to savor their creations and bring the flavors of the world into your home. Whether you're seeking a gourmet feast for a special occasion or craving everyday comfort food made with love, discover your perfect match among our talented cooks who are ready to turn your cravings into unforgettable culinary adventures." -->

function dragStart(ev) {
    console.log("dragging");

    var dragImage = document.getElementById("dragImage");
    dragImage.style.display = "block"; // Show the drag image

    // Calculate offset position relative to the touch point
    var offsetX = 50; // Example offset values
    var offsetY = 50;

    // Position the drag image
    dragImage.style.left = (ev.touches[0].clientX - offsetX) + "px";
    dragImage.style.top = (ev.touches[0].clientY - offsetY) + "px";

    ev.dataTransfer.setData("text", ev.target.dataset.tileIndex);
}

// Prevent default touch event handling
document.addEventListener("touchmove", function (e) {
    e.preventDefault();
}, { passive: false });

#dragImage {
    position: absolute;
    z-index: -1; /* Ensure it's behind the cursor */
    /* Add any styling for your drag image */
}

<div id="dragImage" style="display: none;">
    <!-- Your drag image content goes here -->
</div>

<div draggable="true" ondragstart="dragStart(event)">Drag me</div>


Frequently Asked Questions (FAQs) for Cooks Sharing Meals on a Website
General:

How does the website work? (Explain the process of listing meals, receiving orders, and delivering food)
What are the fees associated with listing meals?*
How do I get paid for my meals?*
What is the delivery process like? (Do cooks deliver themselves, or is there a delivery service?)
What happens if a customer cancels an order?
How do I handle food safety and regulations?
Is there any insurance coverage for cooks?
What kind of support does the website offer to cooks?
Listing Meals:

What types of meals can I list? (Are there any restrictions on ingredients, cuisine types, or portion sizes?)*
How do I set the price of my meals?
How many photos can I include for each meal listing?
Can I offer different serving sizes or dietary options?
How far in advance do I need to list a meal?
Can I edit my meal listings after they are published?
Orders and Customers:

How can customers contact me with questions about my meals?
Can I communicate directly with customers about their orders?
What happens if a customer has a dietary restriction I didn't list?
What is the website's policy on refunds?
How do I know if a customer has allergies or dietary restrictions?
Marketing and Promotion:

How can I promote my meals on the website?
Does the website offer any marketing or advertising tools for cooks?
Can I offer discounts or promotions on my meals?
Additional Considerations:

Allow delivery 

kitchinitti app name

https://www.ontario.ca/laws/regulation/R17493#BK4


renting spaces for cooks and giving them a card that allows them to access the place (collecting a monthly subscription)






<script setup>
import axios from "axios";
import TextInput from "@/Components/TextInput.vue";
</script>
<template>
    <div class="flex py-6 flex-col flex-auto flex-shrink-0 rounded-2xl h-full">
        <div class="flex flex-col h-full overflow-x-auto simple">
            <div class="flex flex-col h-full">
                <div class="grid grid-cols-12 gap-y-2">
                    <div class="col-start-4 col-end-13 p-3 rounded-lg">
                        <div
                            class="flex items-center justify-start flex-row-reverse"
                        >
                            <div
                                class="relative mr-3 text-sm bg-persian py-2 px-4 shadow rounded-t-[2rem] rounded-l-[2rem]"
                            >
                                <div>
                                    Lorem ipsum dolor sit, amet consectetur
                                    adipisicing. ?
                                </div>
                                <div
                                    class="absolute text-xs bottom-0 right-0 -mb-5 mr-2 text-gray-500"
                                >
                                    Seen
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-start-1 col-end-9 p-3 rounded-lg">
                        <div class="flex flex-row items-center">
                            <div
                                class="relative ml-3 text-sm text-oynx dark:text-snow bg-snow/40 dark:bg-oynx/40 py-2 px-4 shadow rounded-t-[2rem] rounded-r-[2rem]"
                            >
                                <div>
                                    Lorem ipsum dolor sit amet consectetur
                                    adipisicing elit. Perspiciatis, in.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div v-for="message in messages" :key="message.id">
            <strong>{{ message.user_id }}:</strong> {{ message.message }}
        </div>
        <div
            class=" flex flex-row items-center h-16 rounded-b-xl bg-transparent w-full p-3"
        >
            <div class="flex-grow ml-4">
                <div class="relative w-full">
                    <!-- <input
                                        type="text"
                                        class="flex w-full border rounded-xl focus:outline-none focus:border-indigo-300 pl-4 h-10"
                                    /> -->
                    <TextInput
                        class="w-full relative"
                        v-model="newMessage"
                        @keyup.enter="sendMessage"
                    />
                </div>
            </div>
            <div class="ml-4">
                <button
                    @click="sendMessage"
                    class="flex items-center justify-center rounded-xl text-white flex-shrink-0"
                >
                    <span class="">
                        <svg
                            class="w-6 h-6 transform rotate-90 text-polynesian dark:text-lighred hover:rotate-45 hover:text-persian"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                            ></path>
                        </svg>
                    </span>
                </button>
            </div>
        </div>
    </div>
</template>

<script>
export default {
    props: {
        order: Object,
    },
    data() {
        return {
            messages: [],
            newMessage: "",
        };
    },
    created() {
        this.fetchMessages();
    },
    mounted() {
        // this.fetchMessages();
        // Echo.channel("chat").listen("MessageSent", (e) => {
        //     this.messages.push(e.chat);
        // });
        Echo.private("chat."+ this.order.id).listen("MessageSent", (e) => {
            this.messages.push({
                message: e.chat
            });
        });
    },
    methods: {
        // connect(){
        //     if(this.order.id){
        //       let vm = this;
        //       this.fetchMessages();
        //       window.Echo.private("chat."+ this.order.id)
        //     }

        // },
        fetchMessages() {
            axios.get("/messages/" + this.order.id).then((response) => {
                this.messages = response.data;
            });
        },
        sendMessage() {
            if (this.newMessage == " " || this.newMessage == null) {
                return;
            } else {
                axios
                    .post("/messages", {
                        user: this.$page.props.auth.user.id,
                        meal_schedule_id: this.order.id, // Replace with the actual user
                        message: this.newMessage,
                    })
                    .then((response) => {
                        this.newMessage = "";
                    });
            }
        },
    },
};
</script>
